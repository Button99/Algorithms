{"ast":null,"code":"export default {\n  algorithmsArraySearch: [{\n    _id: '1',\n    name: \"Sequential Search\",\n    algo: \"def sequentialSearch(array, searchingNumber): \\n\" + \"   found = False\\n\" + \"   i = 0\\n\" + \"   index = -1\\n\" + \"    while i < len(array) and not found:\\n\" + \"        if array[i] == searchingNumber:\\n\" + \"            index = i\\n\" + \"            found = True\\n\" + \"        i += 1\\n\" + \"    if index != int(-1):\\n\" + \"        print(\\\"Found at position: \\\" + str(index))\\n\" + \"    else:\\n\" + \"        print(\\\"Not found!\\\")\\n\"\n  }, {\n    _id: '2',\n    name: \"Binary Search\",\n    algo: \"def binarySearch(array, searchingNumber):\\n\" + \"    found = False\\n\" + \"    index = -1\\n\" + \"    left = 0\\n\" + \"    right = len(array) - 1\\n\" + \"    while left <= right and not found:\\n\" + \"        mid = (left + right) // 2\\n\" + \"        if array[mid] < searchingNumber:\\n\" + \"            left = mid + 1\\n\" + \"        elif array[mid] > searchingNumber:\\n\" + \"            right = mid - 1\\n\" + \"        else:\\n\" + \"            print(\\\"Found at: \\\" + str(mid))\\n\" + \"            found = True\\n\"\n  }, {\n    _id: '3',\n    name: \"Fibonacci Search\",\n    algo: \"def fibonacciSearch(array, searchingNumber):\\n\" + \"    found = False\\n\" + \"    f1 = 0\\n\" + \"    f2 = 1\\n\" + \"    f3 = 1\\n\" + \"    while f3 < (len(array) - 1):\\n\" + \"        f1 = f2\\n\" + \"        f2 = f3\\n\" + \"        f3 = f1 + f2\\n\" + \"    low = 0\\n\" + \"    index = -1\\n\" + \"    high = len(array) - 1\\n\" + \"    while high >= low and not found:\\n\" + \"        i = low + f2 - 1\\n\" + \"        f3 = f2\\n\" + \"        f2 = f1\\n\" + \"        f1 = f3 - f2\\n\" + \"        if searchingNumber == array[i]:\\n\" + \"            found = True\\n\" + \"            index = i\\n\" + \"        else:\\n\" + \"            if searchingNumber < array[i]:\\n\" + \"                high = i - 1\\n\" + \"            else:\\n\" + \"                low = i + 1\\n\" + \"                f3 = f2\\n\" + \"                f2 = f1\\n\" + \"                f1 = f3 - f2\\n\" + \"    if found:\\n\" + \"        print(\\\"Found at: \\\" + str(index))\\n\" + \"    else:\\n\" + \"        print(\\\"Not found!\\\")\"\n  }, {\n    _id: '4',\n    name: \"Block Search\",\n    algo: \"def blockSearch(array, searchingNumber):\\n\" + \"    found = False\\n\" + \"    size = math.sqrt(len(array))\\n\" + \"    i = size\\n\" + \"    j = len(array) - 1\\n\" + \"    if searchingNumber > array[j]:\\n\" + \"        index = len(array)\\n\" + \"        print(\\\"Found1: \\\" + str(index))\\n\" + \"    else:\\n\" + \"        while i < len(interpolationSearch()):\\n\" + \"            if searchingNumber <= array[i]:\\n\" + \"                j = i\\n\" + \"                i = len(array)\\n\" + \"            else:\\n\" + \"                i = i + size\\n\" + \"                if i > len(array) - 1:\\n\" + \"                    i = len(array) - 1\\n\" + \"            i = j - size\\n\" + \"            for i in j:\\n\" + \"                if searchingNumber == array[i]:\\n\" + \"                    index = i\\n\" + \"                    found = True\\n\" + \"                    break\\n\" + \"                else:\\n\" + \"                    if searchingNumber < array[i]:\\n\" + \"                        index = i\\n\" + \"                        break\\n\" + \"            if found:\\n\" + \"                print(\\\"Found : \\\" + index)\\n\" + \"            else:\\n\" + \"                print(\\\"Not found\\\")\"\n  }, {\n    _id: '5',\n    name: \"Interpolation Search\",\n    algo: \"def interpolationSearch(array, searchingNumber):\\n\" + \"    found = False\\n\" + \"    low = 0\\n\" + \"    high = len(array) - 1\\n\" + \"    while array[low] <= searchingNumber and searchingNumber <= array[high] and not found:\\n\" + \"        f = float((high - low) / (array[high] - array[low]) * (searchingNumber - array[low]))\\n\" + \"        mid = int(f + 0.5)\\n\" + \"        i = mid + low\\n\" + \"        if (searchingNumber == array[i]):\\n\" + \"            found = True\\n\" + \"            index = i\\n\" + \"        else:\\n\" + \"            if searchingNumber > array[i]:\\n\" + \"                low = i + 1\\n\" + \"            else:\\n\" + \"                high = i - 1\\n\" + \"    if found == True:\\n\" + \"        print(\\\"Found at: \\\" + str(index))\\n\" + \"    else:\\n\" + \"        print(\\\"Not found!\\\")\"\n  }]\n};","map":{"version":3,"sources":["/home/user/WebstormProjects/Algorithms_Project/src/data.js"],"names":["algorithmsArraySearch","_id","name","algo"],"mappings":"AAAA,eAAe;AACXA,EAAAA,qBAAqB,EAAE,CAAC;AACpBC,IAAAA,GAAG,EAAE,GADe;AAEpBC,IAAAA,IAAI,EAAE,mBAFc;AAGpBC,IAAAA,IAAI,EAAE,qDACF,oBADE,GAEF,YAFE,GAGF,iBAHE,GAIF,2CAJE,GAKF,2CALE,GAMF,yBANE,GAOF,4BAPE,GAQF,kBARE,GASF,4BATE,GAUF,uDAVE,GAWF,aAXE,GAYF;AAfgB,GAAD,EAkBnB;AACIF,IAAAA,GAAG,EAAE,GADT;AAEIC,IAAAA,IAAI,EAAE,eAFV;AAGIC,IAAAA,IAAI,EAAE,gDACF,qBADE,GAEF,kBAFE,GAGF,gBAHE,GAIF,8BAJE,GAKF,0CALE,GAMF,qCANE,GAOF,4CAPE,GAQF,8BARE,GASF,8CATE,GAUF,+BAVE,GAWF,iBAXE,GAYF,gDAZE,GAaF;AAhBR,GAlBmB,EAoCnB;AACIF,IAAAA,GAAG,EAAE,GADT;AAEIC,IAAAA,IAAI,EAAE,kBAFV;AAGIC,IAAAA,IAAI,EAAE,mDACF,qBADE,GAEF,cAFE,GAGF,cAHE,GAIF,cAJE,GAKF,oCALE,GAMF,mBANE,GAOF,mBAPE,GAQF,wBARE,GASF,eATE,GAUF,kBAVE,GAWF,6BAXE,GAYF,wCAZE,GAaF,4BAbE,GAcF,mBAdE,GAeF,mBAfE,GAgBF,wBAhBE,GAiBF,2CAjBE,GAkBF,4BAlBE,GAmBF,yBAnBE,GAoBF,iBApBE,GAqBF,8CArBE,GAsBF,gCAtBE,GAuBF,qBAvBE,GAwBF,+BAxBE,GAyBF,2BAzBE,GA0BF,2BA1BE,GA2BF,gCA3BE,GA4BF,iBA5BE,GA6BF,8CA7BE,GA8BF,aA9BE,GA+BF;AAlCR,GApCmB,EAwEnB;AACIF,IAAAA,GAAG,EAAE,GADT;AAEIC,IAAAA,IAAI,EAAE,cAFV;AAGIC,IAAAA,IAAI,EAAE,+CACF,qBADE,GAEF,oCAFE,GAGF,gBAHE,GAIF,0BAJE,GAKF,sCALE,GAMF,8BANE,GAOF,4CAPE,GAQF,aARE,GASF,iDATE,GAUF,+CAVE,GAWF,yBAXE,GAYF,kCAZE,GAaF,qBAbE,GAcF,gCAdE,GAeF,0CAfE,GAgBF,0CAhBE,GAiBF,4BAjBE,GAkBF,2BAlBE,GAmBF,mDAnBE,GAoBF,iCApBE,GAqBF,oCArBE,GAsBF,6BAtBE,GAuBF,yBAvBE,GAwBF,sDAxBE,GAyBF,qCAzBE,GA0BF,iCA1BE,GA2BF,yBA3BE,GA4BF,+CA5BE,GA6BF,qBA7BE,GA8BF;AAjCR,GAxEmB,EA2GnB;AACIF,IAAAA,GAAG,EAAE,GADT;AAEIC,IAAAA,IAAI,EAAE,sBAFV;AAGIC,IAAAA,IAAI,EAAE,uDACF,qBADE,GAEF,eAFE,GAGF,6BAHE,GAIF,6FAJE,GAKF,iGALE,GAMF,8BANE,GAOF,yBAPE,GAQF,6CARE,GASF,4BATE,GAUF,yBAVE,GAWF,iBAXE,GAYF,8CAZE,GAaF,+BAbE,GAcF,qBAdE,GAeF,gCAfE,GAgBF,yBAhBE,GAiBF,8CAjBE,GAkBF,aAlBE,GAmBF;AAtBR,GA3GmB;AADZ,CAAf","sourcesContent":["export default {\n    algorithmsArraySearch: [{\n        _id: '1',\n        name: \"Sequential Search\",\n        algo: \"def sequentialSearch(array, searchingNumber): \\n\" +\n            \"   found = False\\n\" +\n            \"   i = 0\\n\" +\n            \"   index = -1\\n\" +\n            \"    while i < len(array) and not found:\\n\" +\n            \"        if array[i] == searchingNumber:\\n\" +\n            \"            index = i\\n\" +\n            \"            found = True\\n\" +\n            \"        i += 1\\n\" +\n            \"    if index != int(-1):\\n\" +\n            \"        print(\\\"Found at position: \\\" + str(index))\\n\" +\n            \"    else:\\n\" +\n            \"        print(\\\"Not found!\\\")\\n\"\n\n        },\n        {\n            _id: '2',\n            name: \"Binary Search\",\n            algo: \"def binarySearch(array, searchingNumber):\\n\" +\n                \"    found = False\\n\" +\n                \"    index = -1\\n\" +\n                \"    left = 0\\n\" +\n                \"    right = len(array) - 1\\n\" +\n                \"    while left <= right and not found:\\n\" +\n                \"        mid = (left + right) // 2\\n\" +\n                \"        if array[mid] < searchingNumber:\\n\" +\n                \"            left = mid + 1\\n\" +\n                \"        elif array[mid] > searchingNumber:\\n\" +\n                \"            right = mid - 1\\n\" +\n                \"        else:\\n\" +\n                \"            print(\\\"Found at: \\\" + str(mid))\\n\" +\n                \"            found = True\\n\"\n        },\n        {\n            _id: '3',\n            name: \"Fibonacci Search\",\n            algo: \"def fibonacciSearch(array, searchingNumber):\\n\" +\n                \"    found = False\\n\" +\n                \"    f1 = 0\\n\" +\n                \"    f2 = 1\\n\" +\n                \"    f3 = 1\\n\" +\n                \"    while f3 < (len(array) - 1):\\n\" +\n                \"        f1 = f2\\n\" +\n                \"        f2 = f3\\n\" +\n                \"        f3 = f1 + f2\\n\" +\n                \"    low = 0\\n\" +\n                \"    index = -1\\n\" +\n                \"    high = len(array) - 1\\n\" +\n                \"    while high >= low and not found:\\n\" +\n                \"        i = low + f2 - 1\\n\" +\n                \"        f3 = f2\\n\" +\n                \"        f2 = f1\\n\" +\n                \"        f1 = f3 - f2\\n\" +\n                \"        if searchingNumber == array[i]:\\n\" +\n                \"            found = True\\n\" +\n                \"            index = i\\n\" +\n                \"        else:\\n\" +\n                \"            if searchingNumber < array[i]:\\n\" +\n                \"                high = i - 1\\n\" +\n                \"            else:\\n\" +\n                \"                low = i + 1\\n\" +\n                \"                f3 = f2\\n\" +\n                \"                f2 = f1\\n\" +\n                \"                f1 = f3 - f2\\n\" +\n                \"    if found:\\n\" +\n                \"        print(\\\"Found at: \\\" + str(index))\\n\" +\n                \"    else:\\n\" +\n                \"        print(\\\"Not found!\\\")\"\n        },\n        {\n            _id: '4',\n            name: \"Block Search\",\n            algo: \"def blockSearch(array, searchingNumber):\\n\" +\n                \"    found = False\\n\" +\n                \"    size = math.sqrt(len(array))\\n\" +\n                \"    i = size\\n\" +\n                \"    j = len(array) - 1\\n\" +\n                \"    if searchingNumber > array[j]:\\n\" +\n                \"        index = len(array)\\n\" +\n                \"        print(\\\"Found1: \\\" + str(index))\\n\" +\n                \"    else:\\n\" +\n                \"        while i < len(interpolationSearch()):\\n\" +\n                \"            if searchingNumber <= array[i]:\\n\" +\n                \"                j = i\\n\" +\n                \"                i = len(array)\\n\" +\n                \"            else:\\n\" +\n                \"                i = i + size\\n\" +\n                \"                if i > len(array) - 1:\\n\" +\n                \"                    i = len(array) - 1\\n\" +\n                \"            i = j - size\\n\" +\n                \"            for i in j:\\n\" +\n                \"                if searchingNumber == array[i]:\\n\" +\n                \"                    index = i\\n\" +\n                \"                    found = True\\n\" +\n                \"                    break\\n\" +\n                \"                else:\\n\" +\n                \"                    if searchingNumber < array[i]:\\n\" +\n                \"                        index = i\\n\" +\n                \"                        break\\n\" +\n                \"            if found:\\n\" +\n                \"                print(\\\"Found : \\\" + index)\\n\" +\n                \"            else:\\n\" +\n                \"                print(\\\"Not found\\\")\"\n        },\n        {\n            _id: '5',\n            name: \"Interpolation Search\",\n            algo: \"def interpolationSearch(array, searchingNumber):\\n\" +\n                \"    found = False\\n\" +\n                \"    low = 0\\n\" +\n                \"    high = len(array) - 1\\n\" +\n                \"    while array[low] <= searchingNumber and searchingNumber <= array[high] and not found:\\n\" +\n                \"        f = float((high - low) / (array[high] - array[low]) * (searchingNumber - array[low]))\\n\" +\n                \"        mid = int(f + 0.5)\\n\" +\n                \"        i = mid + low\\n\" +\n                \"        if (searchingNumber == array[i]):\\n\" +\n                \"            found = True\\n\" +\n                \"            index = i\\n\" +\n                \"        else:\\n\" +\n                \"            if searchingNumber > array[i]:\\n\" +\n                \"                low = i + 1\\n\" +\n                \"            else:\\n\" +\n                \"                high = i - 1\\n\" +\n                \"    if found == True:\\n\" +\n                \"        print(\\\"Found at: \\\" + str(index))\\n\" +\n                \"    else:\\n\" +\n                \"        print(\\\"Not found!\\\")\"\n        }],\n\n\n}"]},"metadata":{},"sourceType":"module"}