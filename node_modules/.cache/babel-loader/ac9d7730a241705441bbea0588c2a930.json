{"ast":null,"code":"export default {\n  algorithmsArraySearch: [{\n    _id: \"1\",\n    name: \"Sequential Search\",\n    algo: \"def sequentialSearch(array, searchingNumber): \\n\" + \"   found = False\\n\" + \"   i = 0\\n\" + \"   index = -1\\n\" + \"    while i < len(array) and not found:\\n\" + \"        if array[i] == searchingNumber:\\n\" + \"            index = i\\n\" + \"            found = True\\n\" + \"        i += 1\\n\" + \"    if index != int(-1):\\n\" + \"        print(\\\"Found at position: \\\" + str(index))\\n\" + \"    else:\\n\" + \"        print(\\\"Not found!\\\")\\n\"\n  }, {\n    _id: \"2\",\n    name: \"Binary Search\",\n    algo: \"def binarySearch(array, searchingNumber):\\n\" + \"    found = False\\n\" + \"    index = -1\\n\" + \"    left = 0\\n\" + \"    right = len(array) - 1\\n\" + \"    while left <= right and not found:\\n\" + \"        mid = (left + right) // 2\\n\" + \"        if array[mid] < searchingNumber:\\n\" + \"            left = mid + 1\\n\" + \"        elif array[mid] > searchingNumber:\\n\" + \"            right = mid - 1\\n\" + \"        else:\\n\" + \"            print(\\\"Found at: \\\" + str(mid))\\n\" + \"            found = True\\n\"\n  }, {\n    _id: \"3\",\n    name: \"Fibonacci Search\",\n    algo: \"def fibonacciSearch(array, searchingNumber):\\n\" + \"    found = False\\n\" + \"    f1 = 0\\n\" + \"    f2 = 1\\n\" + \"    f3 = 1\\n\" + \"    while f3 < (len(array) - 1):\\n\" + \"        f1 = f2\\n\" + \"        f2 = f3\\n\" + \"        f3 = f1 + f2\\n\" + \"    low = 0\\n\" + \"    index = -1\\n\" + \"    high = len(array) - 1\\n\" + \"    while high >= low and not found:\\n\" + \"        i = low + f2 - 1\\n\" + \"        f3 = f2\\n\" + \"        f2 = f1\\n\" + \"        f1 = f3 - f2\\n\" + \"        if searchingNumber == array[i]:\\n\" + \"            found = True\\n\" + \"            index = i\\n\" + \"        else:\\n\" + \"            if searchingNumber < array[i]:\\n\" + \"                high = i - 1\\n\" + \"            else:\\n\" + \"                low = i + 1\\n\" + \"                f3 = f2\\n\" + \"                f2 = f1\\n\" + \"                f1 = f3 - f2\\n\" + \"    if found:\\n\" + \"        print(\\\"Found at: \\\" + str(index))\\n\" + \"    else:\\n\" + \"        print(\\\"Not found!\\\")\"\n  }, {\n    _id: \"4\",\n    name: \"Block Search\",\n    algo: \"def blockSearch(array, searchingNumber):\\n\" + \"    found = False\\n\" + \"    size = math.sqrt(len(array))\\n\" + \"    i = size\\n\" + \"    j = len(array) - 1\\n\" + \"    if searchingNumber > array[j]:\\n\" + \"        index = len(array)\\n\" + \"        print(\\\"Found1: \\\" + str(index))\\n\" + \"    else:\\n\" + \"        while i < len(interpolationSearch()):\\n\" + \"            if searchingNumber <= array[i]:\\n\" + \"                j = i\\n\" + \"                i = len(array)\\n\" + \"            else:\\n\" + \"                i = i + size\\n\" + \"                if i > len(array) - 1:\\n\" + \"                    i = len(array) - 1\\n\" + \"            i = j - size\\n\" + \"            for i in j:\\n\" + \"                if searchingNumber == array[i]:\\n\" + \"                    index = i\\n\" + \"                    found = True\\n\" + \"                    break\\n\" + \"                else:\\n\" + \"                    if searchingNumber < array[i]:\\n\" + \"                        index = i\\n\" + \"                        break\\n\" + \"            if found:\\n\" + \"                print(\\\"Found : \\\" + index)\\n\" + \"            else:\\n\" + \"                print(\\\"Not found\\\")\"\n  }, {\n    _id: \"5\",\n    name: \"Interpolation Search\",\n    algo: \"def interpolationSearch(array, searchingNumber):\\n\" + \"    found = False\\n\" + \"    low = 0\\n\" + \"    high = len(array) - 1\\n\" + \"    while array[low] <= searchingNumber and searchingNumber <= array[high] and not found:\\n\" + \"        f = float((high - low) / (array[high] - array[low]) * (searchingNumber - array[low]))\\n\" + \"        mid = int(f + 0.5)\\n\" + \"        i = mid + low\\n\" + \"        if (searchingNumber == array[i]):\\n\" + \"            found = True\\n\" + \"            index = i\\n\" + \"        else:\\n\" + \"            if searchingNumber > array[i]:\\n\" + \"                low = i + 1\\n\" + \"            else:\\n\" + \"                high = i - 1\\n\" + \"    if found == True:\\n\" + \"        print(\\\"Found at: \\\" + str(index))\\n\" + \"    else:\\n\" + \"        print(\\\"Not found!\\\")\"\n  }],\n  algorithmsArrayClassification: [{\n    _id: \"6\",\n    name: 'Bubble Sort',\n    algo: \"def bubbleSort(array):\\n\" + \"    for i in range(len(array)):\\n\" + \"        for j in range(0, len(array) -1):\\n\" + \"            if array[j] > array[j+1]:\\n\" + \"                array[j+1], array[j]= array[j], array[j+1]\\n\" + \"    return array\"\n  }, {\n    _id: \"7\",\n    name: \"Quick Sort\",\n    algo: \"def quickSort(array, low, high):\\n\" + \"    i= low\\n\" + \"    j= high\\n\" + \"    mid= (low + high) // 2\\n\" + \"    x= array[mid]\\n\" + \"    while i<= j :\\n\" + \"        while array[i] < x:\\n\" + \"            i+=1\\n\" + \"        while array[j] > x:\\n\" + \"            j -= 1\\n\" + \"        if i<=j:\\n\" + \"            array[i], array[j]= array[j], array[i]\\n\" + \"            i+=1\\n\" + \"            j-=1\\n\" + \"        if low < j:\\n\" + \"            quickSort(array, low, j)\\n\" + \"        elif i < high:\\n\" + \"            quickSort(array, i, high)\\n\" + \"    return array\"\n  }, {\n    _id: \"8\",\n    name: \"Selection Sort\",\n    algo: \"def selectionSort(array):\\n\" + \"    for i in range(len(array)):\\n\" + \"        min= i\\n\" + \"        for j in range(i+1, len(array)):\\n\" + \"            if array[min]> array[j]:\\n\" + \"                min= j\\n\" + \"        array[i], array[min]= array[min], array[i]\\n\" + \"    return array\"\n  }, {\n    _id: \"9\",\n    name: \"Straight Insertion Sort\",\n    algo: \"def straightInsertionSort(array):\\n\" + \"    for i in range(1, len(array)):\\n\" + \"        j= i-1\\n\" + \"        index= array[i]\\n\" + \"        while j>=0 and index < array[j]:\\n\" + \"            array[j+1]= array[j]\\n\" + \"            j-=1\\n\" + \"        array[j+1]= index\\n\" + \"    return array\"\n  }],\n  algorithmsStringSearch: [{\n    _id: \"10\",\n    name: \"Brute Force\",\n    algo: \"def bruteForce(array, wordSearch):\\n\" + \"    flag=0\\n\" + \"    firstChar= wordSearch[0]\\n\" + \"    for i in range(len(array) - len(wordSearch)+1):\\n\" + \"        if firstChar == array[i]:\\n\" + \"            i, j= 1, i+1\\n\" + \"            while i < len(wordSearch):\\n\" + \"                if wordSearch[i] == array[j]:\\n\" + \"                    if flag == 0:\\n\" + \"                        start= i\\n\" + \"                        flag=1\\n\" + \"                    i+=1\\n\" + \"                    j+=1\\n\" + \"                else:\\n\" + \"                    break\\n\" + \"            else:\\n\" + \"                print(\\\"Found at \\\"+ str(start) + \\\" end \\\"+ str(i))\"\n  }],\n  algorithmStack: [{\n    _id: \"11\",\n    name: \"Stack\",\n    algo: \"def stack(stack):\\n\" + \"    choice= 1\\n\" + \"    while choice != 3:\\n\" + \"        print(\\\"What you want to do 1.Push\\\\n 2.Pop\\\\n3.Close\\\")\\n\" + \"\\n\" + \"        # First we look the size of the stack\\n\" + \"        print(\\\"Size of stack: \\\" + str(len(stack)))\\n\" + \"\\n\" + \"        choice= int(input())\\n\" + \"\\n\" + \"        if choice == 1:\\n\" + \"            print(\\\"Enter the data \\\")\\n\" + \"            x= input()\\n\" + \"            stack.append(x)\\n\" + \"\\n\" + \"            # Print the stack size\\n\" + \"            print(\\\"Stack size: \\\" + str(len(stack)))\\n\" + \"\\n\" + \"            # Print the top number\\n\" + \"            print(\\\"Stack top: \\\" + stack[-1])\\n\" + \"\\n\" + \"        if choice == 2:\\n\" + \"            if len(stack) >= 1 :\\n\" + \"                print(\\\"Pop: \\\" + stack.pop())\\n\" + \"\\n\" + \"                # Print the new stack size\\n\" + \"                print(\\\"New stack size: \\\"+ str(len(stack)))\\n\" + \"\\n\" + \"                # Print the top\\n\" + \"                print(\\\"Stack top: \\\" + str(stack[-1]))\"\n  }],\n  algorithmQueue: [{\n    _id: \"12\",\n    name: \"Queue\",\n    algo: \"def queue(queue):\\n\" + \"\\n\" + \"    choice=1\\n\" + \"    while choice != 3:\\n\" + \"        print(\\\"What you want to do 1.Insert\\\\n 2.Dequeue\\\\n 3.Close\\\")\\n\" + \"\\n\" + \"        # First we look the size\\n\" + \"        print(\\\"Size of the queue: \\\" + str(len(queue)))\\n\" + \"\\n\" + \"        choice= int(input())\\n\" + \"\\n\" + \"        if choice == 1:\\n\" + \"            print(\\\"Enter your type: \\\")\\n\" + \"            x= input()\\n\" + \"            queue.append(x)\\n\" + \"\\n\" + \"            # Prints the new size of the queue\\n\" + \"            print(\\\"New size: \\\" + str(len(queue)))\\n\" + \"\\n\" + \"        if choice == 2:\\n\" + \"            if len(queue) < 1:\\n\" + \"                print(\\\"Error\\\")\\n\" + \"\\n\" + \"            else:\\n\" + \"                print(\\\"Dequeue: \\\"+ str(queue.pop(0)))\\n\" + \"\\n\" + \"                # Prints the new size of the queue\\n\" + \"                print(\\\"New size: \\\" + str(len(queue)))\\n\"\n  }],\n  algorithmTree: [{\n    _id: \"13\",\n    name: \"Tree\",\n    algo: \"root = None\\n\" + \"\\n\" + \"ch=0\\n\" + \"\\n\" + \"# First we need to create the class\\n\" + \"class node:\\n\" + \"\\n\" + \"    def __init__(self):\\n\" + \"        self.data = \\\"\\\"\\n\" + \"        self.left = None\\n\" + \"        self.right = None\\n\" + \"\\n\" + \"\\n\"\n  }, {\n    _id: \"14\",\n    name: \"Find max\",\n    algo: \"            def findMax(root):\\\\n\\\" +\\n\" + \"                if root.right is None:\" + \"\\n\" + \"                    print(root)\" + \"\\n\" + \"                else:\" + \"\\n\" + \"                    findMax(root.right)\" + \"\\n\"\n  }, {\n    _id: \"15\",\n    name: \"Count nodes\",\n    algo: \"            def countNodes(root):\" + \"\\n\" + \"                sum=0 \" + \"\\n\" + \"                if root is not None:\" + \"\\n\" + \"                    sum= countNodes(root.left)\" + \"\\n\" + \"                    sum+= 1\" + \"\\n\" + \"                    sum+= countNodes(root.right)\" + \"\\n\" + \"                return sum\" + \"\\n\"\n  }, {\n    _id: \"16\",\n    name: \"Insert Data \",\n    algo: \"            def insertTree(root, dat): \" + \"\\n\" + \"                if dat.data <= root.data: \" + \"\\n\" + \"                    if root.left is None: \" + \"\\n\"\n  }, {\n    _id: \"17\",\n    name: \"Print the tree\",\n    algo: \"            def showTree(root):\" + \"\\n\" + \"                if root != None:\" + \"\\n\" + \"                    showTree(root.left)\" + \"\\n\" + \"                    print(root.data)\" + \"\\n\" + \"                    showTree(root.right)\"\n  }, {\n    _id: \"18\",\n    name: \"Create Node\",\n    algo: \"def createNode():\\n\" + \"    root = node()\\n\" + \"    print(\\\"Give data: \\\")\\n\" + \"    dat = int(input())\\n\" + \"    root.data = dat\\n\" + \"\\n\" + \"    return root\\n\" + \"\\n\" + \"        else:\\n\" + \"            insertTree(root.left, dat)\\n\" + \"\\n\" + \"    if dat.data > root.data:\\n\" + \"        if root.right is None:\\n\" + \"            root.right = dat\\n\" + \"        else:\\n\" + \"            insertTree(root.right, dat)\\n\" + \"\\n\"\n  }]\n};","map":{"version":3,"sources":["/home/user/WebstormProjects/Algorithms_Project/src/data.js"],"names":["algorithmsArraySearch","_id","name","algo","algorithmsArrayClassification","algorithmsStringSearch","algorithmStack","algorithmQueue","algorithmTree"],"mappings":"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","sourcesContent":["export default {\n    algorithmsArraySearch: [{\n        _id: \"1\",\n        name: \"Sequential Search\",\n        algo: \"def sequentialSearch(array, searchingNumber): \\n\" +\n            \"   found = False\\n\" +\n            \"   i = 0\\n\" +\n            \"   index = -1\\n\" +\n            \"    while i < len(array) and not found:\\n\" +\n            \"        if array[i] == searchingNumber:\\n\" +\n            \"            index = i\\n\" +\n            \"            found = True\\n\" +\n            \"        i += 1\\n\" +\n            \"    if index != int(-1):\\n\" +\n            \"        print(\\\"Found at position: \\\" + str(index))\\n\" +\n            \"    else:\\n\" +\n            \"        print(\\\"Not found!\\\")\\n\"\n\n        },\n        {\n            _id: \"2\",\n            name: \"Binary Search\",\n            algo: \"def binarySearch(array, searchingNumber):\\n\" +\n                \"    found = False\\n\" +\n                \"    index = -1\\n\" +\n                \"    left = 0\\n\" +\n                \"    right = len(array) - 1\\n\" +\n                \"    while left <= right and not found:\\n\" +\n                \"        mid = (left + right) // 2\\n\" +\n                \"        if array[mid] < searchingNumber:\\n\" +\n                \"            left = mid + 1\\n\" +\n                \"        elif array[mid] > searchingNumber:\\n\" +\n                \"            right = mid - 1\\n\" +\n                \"        else:\\n\" +\n                \"            print(\\\"Found at: \\\" + str(mid))\\n\" +\n                \"            found = True\\n\"\n        },\n        {\n            _id: \"3\",\n            name: \"Fibonacci Search\",\n            algo: \"def fibonacciSearch(array, searchingNumber):\\n\" +\n                \"    found = False\\n\" +\n                \"    f1 = 0\\n\" +\n                \"    f2 = 1\\n\" +\n                \"    f3 = 1\\n\" +\n                \"    while f3 < (len(array) - 1):\\n\" +\n                \"        f1 = f2\\n\" +\n                \"        f2 = f3\\n\" +\n                \"        f3 = f1 + f2\\n\" +\n                \"    low = 0\\n\" +\n                \"    index = -1\\n\" +\n                \"    high = len(array) - 1\\n\" +\n                \"    while high >= low and not found:\\n\" +\n                \"        i = low + f2 - 1\\n\" +\n                \"        f3 = f2\\n\" +\n                \"        f2 = f1\\n\" +\n                \"        f1 = f3 - f2\\n\" +\n                \"        if searchingNumber == array[i]:\\n\" +\n                \"            found = True\\n\" +\n                \"            index = i\\n\" +\n                \"        else:\\n\" +\n                \"            if searchingNumber < array[i]:\\n\" +\n                \"                high = i - 1\\n\" +\n                \"            else:\\n\" +\n                \"                low = i + 1\\n\" +\n                \"                f3 = f2\\n\" +\n                \"                f2 = f1\\n\" +\n                \"                f1 = f3 - f2\\n\" +\n                \"    if found:\\n\" +\n                \"        print(\\\"Found at: \\\" + str(index))\\n\" +\n                \"    else:\\n\" +\n                \"        print(\\\"Not found!\\\")\"\n        },\n        {\n            _id: \"4\",\n            name: \"Block Search\",\n            algo: \"def blockSearch(array, searchingNumber):\\n\" +\n                \"    found = False\\n\" +\n                \"    size = math.sqrt(len(array))\\n\" +\n                \"    i = size\\n\" +\n                \"    j = len(array) - 1\\n\" +\n                \"    if searchingNumber > array[j]:\\n\" +\n                \"        index = len(array)\\n\" +\n                \"        print(\\\"Found1: \\\" + str(index))\\n\" +\n                \"    else:\\n\" +\n                \"        while i < len(interpolationSearch()):\\n\" +\n                \"            if searchingNumber <= array[i]:\\n\" +\n                \"                j = i\\n\" +\n                \"                i = len(array)\\n\" +\n                \"            else:\\n\" +\n                \"                i = i + size\\n\" +\n                \"                if i > len(array) - 1:\\n\" +\n                \"                    i = len(array) - 1\\n\" +\n                \"            i = j - size\\n\" +\n                \"            for i in j:\\n\" +\n                \"                if searchingNumber == array[i]:\\n\" +\n                \"                    index = i\\n\" +\n                \"                    found = True\\n\" +\n                \"                    break\\n\" +\n                \"                else:\\n\" +\n                \"                    if searchingNumber < array[i]:\\n\" +\n                \"                        index = i\\n\" +\n                \"                        break\\n\" +\n                \"            if found:\\n\" +\n                \"                print(\\\"Found : \\\" + index)\\n\" +\n                \"            else:\\n\" +\n                \"                print(\\\"Not found\\\")\"\n        },\n        {\n            _id: \"5\",\n            name: \"Interpolation Search\",\n            algo: \"def interpolationSearch(array, searchingNumber):\\n\" +\n                \"    found = False\\n\" +\n                \"    low = 0\\n\" +\n                \"    high = len(array) - 1\\n\" +\n                \"    while array[low] <= searchingNumber and searchingNumber <= array[high] and not found:\\n\" +\n                \"        f = float((high - low) / (array[high] - array[low]) * (searchingNumber - array[low]))\\n\" +\n                \"        mid = int(f + 0.5)\\n\" +\n                \"        i = mid + low\\n\" +\n                \"        if (searchingNumber == array[i]):\\n\" +\n                \"            found = True\\n\" +\n                \"            index = i\\n\" +\n                \"        else:\\n\" +\n                \"            if searchingNumber > array[i]:\\n\" +\n                \"                low = i + 1\\n\" +\n                \"            else:\\n\" +\n                \"                high = i - 1\\n\" +\n                \"    if found == True:\\n\" +\n                \"        print(\\\"Found at: \\\" + str(index))\\n\" +\n                \"    else:\\n\" +\n                \"        print(\\\"Not found!\\\")\"\n        }],\n\n    algorithmsArrayClassification: [{\n            _id: \"6\",\n            name: 'Bubble Sort',\n            algo: \"def bubbleSort(array):\\n\" +\n                \"    for i in range(len(array)):\\n\" +\n                \"        for j in range(0, len(array) -1):\\n\" +\n                \"            if array[j] > array[j+1]:\\n\" +\n                \"                array[j+1], array[j]= array[j], array[j+1]\\n\" +\n                \"    return array\"\n        },\n        {\n            _id: \"7\",\n            name: \"Quick Sort\",\n            algo: \"def quickSort(array, low, high):\\n\" +\n                \"    i= low\\n\" +\n                \"    j= high\\n\" +\n                \"    mid= (low + high) // 2\\n\" +\n                \"    x= array[mid]\\n\" +\n                \"    while i<= j :\\n\" +\n                \"        while array[i] < x:\\n\" +\n                \"            i+=1\\n\" +\n                \"        while array[j] > x:\\n\" +\n                \"            j -= 1\\n\" +\n                \"        if i<=j:\\n\" +\n                \"            array[i], array[j]= array[j], array[i]\\n\" +\n                \"            i+=1\\n\" +\n                \"            j-=1\\n\" +\n                \"        if low < j:\\n\" +\n                \"            quickSort(array, low, j)\\n\" +\n                \"        elif i < high:\\n\" +\n                \"            quickSort(array, i, high)\\n\" +\n                \"    return array\"\n        },\n        {\n            _id: \"8\",\n            name: \"Selection Sort\",\n            algo: \"def selectionSort(array):\\n\" +\n                \"    for i in range(len(array)):\\n\" +\n                \"        min= i\\n\" +\n                \"        for j in range(i+1, len(array)):\\n\" +\n                \"            if array[min]> array[j]:\\n\" +\n                \"                min= j\\n\" +\n                \"        array[i], array[min]= array[min], array[i]\\n\" +\n                \"    return array\"\n        },\n        {\n            _id: \"9\",\n            name: \"Straight Insertion Sort\",\n            algo: \"def straightInsertionSort(array):\\n\" +\n                \"    for i in range(1, len(array)):\\n\" +\n                \"        j= i-1\\n\" +\n                \"        index= array[i]\\n\" +\n                \"        while j>=0 and index < array[j]:\\n\" +\n                \"            array[j+1]= array[j]\\n\" +\n                \"            j-=1\\n\" +\n                \"        array[j+1]= index\\n\" +\n                \"    return array\"\n        }],\n    algorithmsStringSearch: [{\n        _id: \"10\",\n        name: \"Brute Force\",\n        algo: \"def bruteForce(array, wordSearch):\\n\" +\n            \"    flag=0\\n\" +\n            \"    firstChar= wordSearch[0]\\n\" +\n            \"    for i in range(len(array) - len(wordSearch)+1):\\n\" +\n            \"        if firstChar == array[i]:\\n\" +\n            \"            i, j= 1, i+1\\n\" +\n            \"            while i < len(wordSearch):\\n\" +\n            \"                if wordSearch[i] == array[j]:\\n\" +\n            \"                    if flag == 0:\\n\" +\n            \"                        start= i\\n\" +\n            \"                        flag=1\\n\" +\n            \"                    i+=1\\n\" +\n            \"                    j+=1\\n\" +\n\n            \"                else:\\n\" +\n            \"                    break\\n\" +\n\n            \"            else:\\n\" +\n            \"                print(\\\"Found at \\\"+ str(start) + \\\" end \\\"+ str(i))\"\n    }],\n    algorithmStack: [{\n        _id: \"11\",\n        name: \"Stack\",\n        algo: \"def stack(stack):\\n\" +\n            \"    choice= 1\\n\" +\n            \"    while choice != 3:\\n\" +\n            \"        print(\\\"What you want to do 1.Push\\\\n 2.Pop\\\\n3.Close\\\")\\n\" +\n            \"\\n\" +\n            \"        # First we look the size of the stack\\n\" +\n            \"        print(\\\"Size of stack: \\\" + str(len(stack)))\\n\" +\n            \"\\n\" +\n            \"        choice= int(input())\\n\" +\n            \"\\n\" +\n            \"        if choice == 1:\\n\" +\n            \"            print(\\\"Enter the data \\\")\\n\" +\n            \"            x= input()\\n\" +\n            \"            stack.append(x)\\n\" +\n            \"\\n\" +\n            \"            # Print the stack size\\n\" +\n            \"            print(\\\"Stack size: \\\" + str(len(stack)))\\n\" +\n            \"\\n\" +\n            \"            # Print the top number\\n\" +\n            \"            print(\\\"Stack top: \\\" + stack[-1])\\n\" +\n            \"\\n\" +\n            \"        if choice == 2:\\n\" +\n            \"            if len(stack) >= 1 :\\n\" +\n            \"                print(\\\"Pop: \\\" + stack.pop())\\n\" +\n            \"\\n\" +\n            \"                # Print the new stack size\\n\" +\n            \"                print(\\\"New stack size: \\\"+ str(len(stack)))\\n\" +\n            \"\\n\" +\n            \"                # Print the top\\n\" +\n            \"                print(\\\"Stack top: \\\" + str(stack[-1]))\"\n    }],\n    algorithmQueue: [{\n        _id: \"12\",\n        name: \"Queue\",\n        algo: \"def queue(queue):\\n\" +\n            \"\\n\" +\n            \"    choice=1\\n\" +\n            \"    while choice != 3:\\n\" +\n            \"        print(\\\"What you want to do 1.Insert\\\\n 2.Dequeue\\\\n 3.Close\\\")\\n\" +\n            \"\\n\" +\n            \"        # First we look the size\\n\" +\n            \"        print(\\\"Size of the queue: \\\" + str(len(queue)))\\n\" +\n            \"\\n\" +\n            \"        choice= int(input())\\n\" +\n            \"\\n\" +\n            \"        if choice == 1:\\n\" +\n            \"            print(\\\"Enter your type: \\\")\\n\" +\n            \"            x= input()\\n\" +\n            \"            queue.append(x)\\n\" +\n            \"\\n\" +\n            \"            # Prints the new size of the queue\\n\" +\n            \"            print(\\\"New size: \\\" + str(len(queue)))\\n\" +\n            \"\\n\" +\n            \"        if choice == 2:\\n\" +\n            \"            if len(queue) < 1:\\n\" +\n            \"                print(\\\"Error\\\")\\n\" +\n            \"\\n\" +\n            \"            else:\\n\" +\n            \"                print(\\\"Dequeue: \\\"+ str(queue.pop(0)))\\n\" +\n            \"\\n\" +\n            \"                # Prints the new size of the queue\\n\" +\n            \"                print(\\\"New size: \\\" + str(len(queue)))\\n\"\n    }],\n    algorithmTree: [{\n        _id: \"13\",\n        name: \"Tree\",\n        algo: \"root = None\\n\" +\n            \"\\n\" +\n            \"ch=0\\n\" +\n            \"\\n\" +\n            \"# First we need to create the class\\n\" +\n            \"class node:\\n\" +\n            \"\\n\" +\n            \"    def __init__(self):\\n\" +\n            \"        self.data = \\\"\\\"\\n\" +\n            \"        self.left = None\\n\" +\n            \"        self.right = None\\n\" +\n            \"\\n\" +\n            \"\\n\"\n        },\n        {\n            _id: \"14\",\n            name: \"Find max\",\n            algo: \"            def findMax(root):\\\\n\\\" +\\n\" +\n                \"                if root.right is None:\" + \"\\n\" +\n                \"                    print(root)\" + \"\\n\" +\n                \"                else:\" + \"\\n\" +\n                \"                    findMax(root.right)\" + \"\\n\"\n        },\n        {\n            _id: \"15\",\n            name: \"Count nodes\",\n            algo: \"            def countNodes(root):\" + \"\\n\" +\n                \"                sum=0 \" + \"\\n\" +\n                \"                if root is not None:\"  + \"\\n\" +\n                \"                    sum= countNodes(root.left)\" + \"\\n\" +\n                \"                    sum+= 1\" + \"\\n\" +\n                \"                    sum+= countNodes(root.right)\" + \"\\n\" +\n                \"                return sum\" + \"\\n\"\n        },\n        {\n            _id: \"16\",\n            name: \"Insert Data \",\n            algo: \"            def insertTree(root, dat): \" + \"\\n\" +\n                \"                if dat.data <= root.data: \" + \"\\n\" +\n                \"                    if root.left is None: \" + \"\\n\"\n        },\n        {\n            _id: \"17\",\n            name: \"Print the tree\",\n            algo: \"            def showTree(root):\" + \"\\n\" +\n                \"                if root != None:\" + \"\\n\" +\n                \"                    showTree(root.left)\" + \"\\n\" +\n                \"                    print(root.data)\" + \"\\n\" +\n                \"                    showTree(root.right)\"\n        },\n        {\n            _id: \"18\",\n            name: \"Create Node\",\n            algo: \"def createNode():\\n\" +\n                \"    root = node()\\n\" +\n                \"    print(\\\"Give data: \\\")\\n\" +\n                \"    dat = int(input())\\n\" +\n                \"    root.data = dat\\n\" +\n                \"\\n\" +\n                \"    return root\\n\" +\n                \"\\n\" +\n\n                \"        else:\\n\" +\n                \"            insertTree(root.left, dat)\\n\" +\n                \"\\n\" +\n                \"    if dat.data > root.data:\\n\" +\n                \"        if root.right is None:\\n\" +\n                \"            root.right = dat\\n\" +\n                \"        else:\\n\" +\n                \"            insertTree(root.right, dat)\\n\" +\n                \"\\n\"\n        }]\n}"]},"metadata":{},"sourceType":"module"}